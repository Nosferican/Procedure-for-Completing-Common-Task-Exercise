var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [CommonTaskExercise]","category":"page"},{"location":"api/#CommonTaskExercise.denton_interpolation-Tuple{AbstractMatrix{var\"#s4\"} where var\"#s4\"<:Real, AbstractVector{var\"#s5\"} where var\"#s5\"<:Real}","page":"API","title":"CommonTaskExercise.denton_interpolation","text":"denton_interpolation(highfreq::AbstractMatrix{<:Real},\n                     lowfreq::AbstractVector{<:Real})::Matrix{Float64}\n\nReturns the interpolation using the Proportional Denton Method. The implementation is taken from the Quarterly National Accounts Manual – 2017 Edition (Chapter 6, pages 121-122).\n\nIt assumes no gaps in the series.\n\n\n\n\n\n","category":"method"},{"location":"api/#CommonTaskExercise.read_xlsx_sheet-Tuple{XLSX.XLSXFile, AbstractString}","page":"API","title":"CommonTaskExercise.read_xlsx_sheet","text":"read_xlsx_sheet(file::XLSXFile, sheetname::AbstractString)::DataFrame\n\nReturns the data from the sheet for each series from 2010 forward.\n\nAssumes:\n\nA1:A7 contains the metadata header\nColumn names are given by the 8th row\nA: Line\nB: Description\nC: PublishCd\nD and on: Observation Period (e.g., 2010, 2010Q1, 2010M01)\nData starts on the 9th row\n\nNon-numeric values (e.g., \".....\") are interpreted as 0.\n\n\n\n\n\n","category":"method"},{"location":"manual/#Housekeeping","page":"Manual","title":"Housekeeping","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"using Dates: Dates, today # Standard library for Dates/Time\nusing Downloads: download # Standard library for Downloads\nusing Statistics: Statistics, mean # Standard library for Statistics\n\nusing CSV: CSV # Package for working with delimiter-separated values (DSV)\nusing HTTP: HTTP, URI, request # Package for working with HTTP\nusing JSON3: JSON3 # Package for working with JavaScript Object Notation (JSON)\n\nusing XLSX: XLSX, XLSXFile, CellRef, readxlsx, sheetnames, encode_column_number,\n            readtable, gettable, getdata, writetable # Package for working with Excel Files\nusing DataFrames # Package for working with tabular data\n\nusing ShiftedArrays: ShiftedArrays, lag # Lightweight package for lag/leads operations\n\nusing VegaLite # Plotting library using the Vega backend\n\nusing CommonTaskExercise # Module with functionality for this exercise","category":"page"},{"location":"manual/#Retrieve-section-2-NIPA-Excel-[workbook](https://apps.bea.gov/national/Release/XLS/Survey/Section2All_xls.xlsx)","page":"Manual","title":"Retrieve section 2 NIPA Excel workbook","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"isfile(joinpath(pkgdir(CommonTaskExercise), \"data\", \"Section2All_xls.xlsx\")) ||\n    download(string(URI(scheme = \"https\", host = \"apps.bea.gov\",\n                        path = \"/national/Release/XLS/Survey/Section2All_xls.xlsx\")),\n             joinpath(pkgdir(CommonTaskExercise), \"data\", \"Section2All_xls.xlsx\"))","category":"page"},{"location":"manual/#Load-data-from-sheets-for-tables-2.1-A-and-Q,-and-table-2.6-M","page":"Manual","title":"Load data from sheets for tables 2.1 A and Q, and table 2.6 M","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"The corresponding sheetnames are: T20100-A, T20100-Q, T20600-M.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Only load the data portion and headers.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Label column 2 data as Description (or use this as a description attribute)\nLabel column 3 data as PublishCd (use this as your series name)\nExclude rows for Addenda or Per capita or any others that don't have data","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Only keep data for 2010 forward (2010Q1 for quarters, 2010M01 for months)","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Section2All_xls = readxlsx(joinpath(pkgdir(CommonTaskExercise), \"data\", \"Section2All_xls.xlsx\"))","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"We can use read_xlsx_sheet which is a function written to achieve this step.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"For more information on that function, check the API section for the method signature.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"a = read_xlsx_sheet(Section2All_xls, \"T20100-A\")\nfirst(a, 6)","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"q = read_xlsx_sheet(Section2All_xls, \"T20100-Q\")\nfirst(q, 6)","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"m = read_xlsx_sheet(Section2All_xls, \"T20600-M\")\nfirst(m, 6)","category":"page"},{"location":"manual/#Extrapolate-2020Q2-values-using-the-average-of-the-previous-three-quarters-(2019Q3-–-2020Q1)","page":"Manual","title":"Extrapolate 2020Q2 values using the average of the previous three quarters (2019Q3 – 2020Q1)","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"Compare your extrapolations to what was in the published dataset.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Save the published values, extrapolations values, and differences in a new table.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Keep PublishCd, Period, Published_Val, Extrapolated_Val, Difference_Val.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Q3 = select(q, :PublishCd => identity, \"2020Q2\" => identity => :Published_Val,\n            Between(\"2019Q3\",\"2020Q1\") => ByRow((args...) -> mean(args)) => :Extrapolated_Val,\n            renamecols = false)\nQ3[!,:Period] .= \"2020Q2\"\ntransform!(Q3, [:Published_Val, :Extrapolated_Val] => ByRow(-) => :Difference_Val)\nselect!(Q3, [:PublishCd, :Period, :Published_Val, :Extrapolated_Val, :Difference_Val])\nfirst(Q3, 6)","category":"page"},{"location":"manual/#Average-the-monthly-data-from-Table-2.6-into-quarterly-values-(collapse)-for-2017Q1","page":"Manual","title":"Average the monthly data from Table 2.6 into quarterly values (collapse) for 2017Q1","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"Compare the ‘collapsed’ quarters to the quarterly values in Table 2.1.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Save the published quarters, collapsed quarters, and differences in a new table.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Keep PublishCd, Period, Published_Val, Collapsed_Val, Difference_Val.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Q4 = select(m, :PublishCd => identity,\n            Cols(r\"^2017M0[1-3]\") => ByRow((args...) -> mean(args)) => :Collapsed_Val,\n            renamecols = false)\nQ4 = innerjoin(Q4, select(q, [\"PublishCd\", \"2017Q1\"]), on = :PublishCd)\nrename!(Q4, \"2017Q1\" => :Published_Val)\ntransform!(Q4, [:Published_Val, :Collapsed_Val] => ByRow(-) => :Difference_Val)\nQ4[!,:Period] .= \"2017Q1\"\nselect!(Q4, [:PublishCd, :Period, :Published_Val, :Collapsed_Val, :Difference_Val])\nfirst(Q4, 6)","category":"page"},{"location":"manual/#Create-a-table-with-annualized-growth-rates-of-the-Table-2.1-Quarterly-data","page":"Manual","title":"Create a table with annualized growth rates of the Table 2.1 Quarterly data","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"Each series and time period should have the annualized growth rate","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Keep PublishCd, Period, AnnGrowthRate_Val.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Q5 = stack(select(q, Not(1:2)), Not(:PublishCd), variable_name = :Period)\nQ5 = combine(groupby(Q5, :PublishCd),\n             :Period => identity,\n             :value => (x -> replace!((x ./ lag(x)).^4 .- 1, NaN => 0)) => :AnnGrowthRate_Val,\n             renamecols = false)\nfirst(Q5, 6)","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"We replace NaN with 0 since Excel doesn't play well with NaN (i.e., #DIV/0!).","category":"page"},{"location":"manual/#Save-results-in-a-new-Excel-workbook","page":"Manual","title":"Save results in a new Excel workbook","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"Create one sheet for each set of results.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"The sheet names are: Extrapolate, Collapse, and AnnGrowthRate.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"isfile(joinpath(pkgdir(CommonTaskExercise), \"data\", \"newExcelworkbook.xlsx\")) &&\n    rm(joinpath(pkgdir(CommonTaskExercise), \"data\", \"newExcelworkbook.xlsx\"))\nwritetable(joinpath(pkgdir(CommonTaskExercise), \"data\", \"newExcelworkbook.xlsx\"),\n           Extrapolate = (eachcol(Q3), names(Q3)),\n           Collapse = (eachcol(Q4), names(Q4)),\n           AnnGrowthRate = (eachcol(Q5), names(Q5)))","category":"page"},{"location":"manual/#Create-two-functions-for-interpolation-(Optional)","page":"Manual","title":"Create two functions for interpolation (Optional)","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"One to interpolate high frequency pattern to low frequency aggregate series","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"One to interpolate high frequency data from low frequency without a pattern series","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Check the API section for the denton_interpolation method signature.\nYou can also check the test suite.","category":"page"},{"location":"manual/#Pull-NIPA-table-2.1-from-the-BEA-API-for-annual-values","page":"Manual","title":"Pull NIPA table 2.1 from the BEA API for annual values","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"response = request(\"GET\",\n                   URI(scheme = \"https\", host = \"apps.bea.gov\",\n                       path = \"/api/data\",\n                       query = [\"UserID\" => ENV[\"API_BEA_TOKEN\"],\n                                \"method\" => \"getdata\",\n                                \"DatasetName\" => \"NIPA\",\n                                \"ResultFormat\" => \"JSON\",\n                                \"TableName\" => \"T20100\",\n                                \"Frequency\" => \"A\",\n                                \"Year\" => 2019]))\n@assert response.status == 200\njson = JSON3.read(response.body)\nQ8 = DataFrame(json.BEAAPI.Results.Data)\ntransform!(Q8, :DataValue => ByRow(x -> parse(Float64, replace(x, ',' => \"\"))),\n           renamecols = false)\nfirst(Q8, 6)","category":"page"},{"location":"manual/#Save-the-API-values-to-as-CSV-text-file","page":"Manual","title":"Save the API values to as CSV text file","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"Name the file Table2_1_Ann.csv.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Use SeriesCode, TimePeriod, DataValue as headers.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Use your BEA UserId underscore current YearMonthDay as the name of the folder.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"isdir(joinpath(pkgdir(CommonTaskExercise), \"data\", replace(\"nijbs2_$(today())\", '-' => '_'))) ||\n    mkdir(joinpath(pkgdir(CommonTaskExercise), \"data\", replace(\"nijbs2_$(today())\", '-' => '_')))\nQ9 = select(Q8, [:SeriesCode, :TimePeriod, :DataValue])\nCSV.write(joinpath(pkgdir(CommonTaskExercise),\n                   \"data\", replace(\"nijbs2_$(today())\", '-' => '_'), \"Table2_1_Ann.csv\"),\n          Q9)","category":"page"},{"location":"manual/#Generate-a-PDF-graph-based-on-the-API-data-(single-or-multiple-series-with-legend)","page":"Manual","title":"Generate a PDF graph based on the API data (single or multiple series with legend)","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"Q10tbl = Q8[vcat(4:5, 7:8),[:LineDescription, :DataValue]]\ntransform!(Q10tbl, :DataValue => ByRow(x -> x / 1_000_000),\n           :LineDescription =>\n               ByRow(x -> x ∈ [\"Private industries\", \"Government\"] ?\n                         \"Wages and salaries\" :\n                         \"Supplements to wages and salaries\") => \"Account\",\n           renamecols = false)\nreplace!(Q10tbl[!,:LineDescription],\n         \"Employer contributions for employee pension and insurance funds\" =>\n            \"Empl. Contr. Pension/Insurance\",\n         \"Employer contributions for government social insurance\" =>\n            \"Empl. Contr. Social Insurance\")\nfirst(Q10tbl, 6)","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"plt = Q10tbl |>\n    @vlplot(:bar,\n            title = {text = \"US National Income Accounts (2019)\"},\n            x = {\"Account:n\",\n                 axis = {title = \"Income Account\",\n                         labelAlign = \"center\",\n                         labelAngle = 0,\n                         dx = 200}},\n            y = {\"DataValue\", axis = {title = \"Billions in Current Dollars (\\$)\"}},\n            color = {:LineDescription, legend = {title = \"Line Item\"}},\n            height = 400,\n            width = 400,\n            )","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"VegaLite is just one of the various plotting libraries available.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Other backends are available such as Makie (see some examples).","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"isdir(joinpath(pkgdir(CommonTaskExercise), \"figs\")) ||\n    mkdir(joinpath(pkgdir(CommonTaskExercise), \"figs\"))\nsave(joinpath(pkgdir(CommonTaskExercise), \"figs\", \"NIPA.pdf\"), plt)","category":"page"},{"location":"#CommonTaskExercise.jl","page":"Home","title":"CommonTaskExercise.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"An implementation in Julia of a common task exercise.","category":"page"}]
}
