# Housekeeping

```@example Pipeline
using Dates: Dates, today # Standard library for Dates/Time
using Downloads: download # Standard library for Downloads
using Statistics: Statistics, mean # Standard library for Statistics

using CSV: CSV # Package for working with delimiter-separated values (DSV)
using HTTP: HTTP, URI, request # Package for working with HTTP
using JSON3: JSON3 # Package for working with JavaScript Object Notation (JSON)

using XLSX: XLSX, XLSXFile, CellRef, readxlsx, sheetnames, encode_column_number,
            readtable, gettable, getdata, writetable # Package for working with Excel Files
using DataFrames # Package for working with tabular data

using ShiftedArrays: ShiftedArrays, lag # Lightweight package for lag/leads operations

using VegaLite # Plotting library using the Vega backend

using CommonTaskExercise # Module with functionality for this exercise
```

## Retrieve section 2 NIPA Excel [workbook](https://apps.bea.gov/national/Release/XLS/Survey/Section2All_xls.xlsx)

```@example Pipeline
isfile(joinpath(pkgdir(CommonTaskExercise), "data", "Section2All_xls.xlsx")) ||
    download(string(URI(scheme = "https", host = "apps.bea.gov",
                        path = "/national/Release/XLS/Survey/Section2All_xls.xlsx")),
             joinpath(pkgdir(CommonTaskExercise), "data", "Section2All_xls.xlsx"))
```

## Load data from sheets for tables 2.1 A and Q, and table 2.6 M

The corresponding sheetnames are: `T20100-A`, `T20100-Q`, `T20600-M`.

Only load the data portion and headers.

- Label column 2 data as `Description` (or use this as a description attribute)
- Label column 3 data as `PublishCd` (use this as your series name)
- Exclude rows for `Addenda` or `Per capita` or any others that don't have data

Only keep data for 2010 forward (2010Q1 for quarters, 2010M01 for months)

```@example Pipeline
Section2All_xls = readxlsx(joinpath(pkgdir(CommonTaskExercise), "data", "Section2All_xls.xlsx"))
```

We can use `read_xlsx_sheet` which is a function written to achieve this step.

For more information on that function, check the API section for the method signature.

```@example Pipeline
a = read_xlsx_sheet(Section2All_xls, "T20100-A")
first(a, 6)
```

```@example Pipeline
q = read_xlsx_sheet(Section2All_xls, "T20100-Q")
first(q, 6)
```

```@example Pipeline
m = read_xlsx_sheet(Section2All_xls, "T20600-M")
first(m, 6)
```

## Extrapolate 2020Q2 values using the average of the previous three quarters (2019Q3 – 2020Q1)

Compare your extrapolations to what was in the published dataset.

Save the published values, extrapolations values, and differences in a new table.

Keep `PublishCd`, `Period`, `Published_Val`, `Extrapolated_Val`, `Difference_Val`.

```@example Pipeline
Q3 = select(q, :PublishCd => identity, "2020Q2" => identity => :Published_Val,
            Between("2019Q3","2020Q1") => ByRow((args...) -> mean(args)) => :Extrapolated_Val,
            renamecols = false)
Q3[!,:Period] .= "2020Q2"
transform!(Q3, [:Published_Val, :Extrapolated_Val] => ByRow(-) => :Difference_Val)
select!(Q3, [:PublishCd, :Period, :Published_Val, :Extrapolated_Val, :Difference_Val])
first(Q3, 6)
```

## Average the monthly data from Table 2.6 into quarterly values (collapse) for 2017Q1

Compare the ‘collapsed’ quarters to the quarterly values in Table 2.1.

Save the published quarters, collapsed quarters, and differences in a new table.

Keep `PublishCd`, `Period`, `Published_Val`, `Collapsed_Val`, `Difference_Val`.

```@example Pipeline
Q4 = select(m, :PublishCd => identity,
            Cols(r"^2017M0[1-3]") => ByRow((args...) -> mean(args)) => :Collapsed_Val,
            renamecols = false)
Q4 = innerjoin(Q4, select(q, ["PublishCd", "2017Q1"]), on = :PublishCd)
rename!(Q4, "2017Q1" => :Published_Val)
transform!(Q4, [:Published_Val, :Collapsed_Val] => ByRow(-) => :Difference_Val)
Q4[!,:Period] .= "2017Q1"
select!(Q4, [:PublishCd, :Period, :Published_Val, :Collapsed_Val, :Difference_Val])
first(Q4, 6)
```

## Create a table with annualized growth rates of the Table 2.1 Quarterly data

Each series and time period should have the annualized growth rate

Keep `PublishCd`, `Period`, `AnnGrowthRate_Val`.

```@example Pipeline
Q5 = stack(select(q, Not(1:2)), Not(:PublishCd), variable_name = :Period)
Q5 = combine(groupby(Q5, :PublishCd),
             :Period => identity,
             :value => (x -> replace!((x ./ lag(x)).^4 .- 1, NaN => 0)) => :AnnGrowthRate_Val,
             renamecols = false)
first(Q5, 6)
```

We replace `NaN` with `0` since Excel doesn't play well with `NaN` (i.e., `#DIV/0!`).

## Save results in a new Excel workbook

Create one sheet for each set of results.

The sheet names are: `Extrapolate`, `Collapse`, and `AnnGrowthRate`.

```@example Pipeline
isfile(joinpath(pkgdir(CommonTaskExercise), "data", "newExcelworkbook.xlsx")) &&
    rm(joinpath(pkgdir(CommonTaskExercise), "data", "newExcelworkbook.xlsx"))
writetable(joinpath(pkgdir(CommonTaskExercise), "data", "newExcelworkbook.xlsx"),
           Extrapolate = (eachcol(Q3), names(Q3)),
           Collapse = (eachcol(Q4), names(Q4)),
           AnnGrowthRate = (eachcol(Q5), names(Q5)))
```

## Create two functions for interpolation (Optional)

One to interpolate high frequency pattern to low frequency aggregate series

One to interpolate high frequency data from low frequency without a pattern series

- Check the API section for the `denton_interpolation` method signature.

- You can also check the test suite which for the unit tests covering `denton_interpolation`.

## Pull NIPA table 2.1 from the BEA API for annual values

```@example Pipeline
response = request("GET",
                   URI(scheme = "https", host = "apps.bea.gov",
                       path = "/api/data",
                       query = ["UserID" => ENV["API_BEA_TOKEN"],
                                "method" => "getdata",
                                "DatasetName" => "NIPA",
                                "ResultFormat" => "JSON",
                                "TableName" => "T20100",
                                "Frequency" => "A",
                                "Year" => 2019]))
@assert response.status == 200
json = JSON3.read(response.body)
Q8 = DataFrame(json.BEAAPI.Results.Data)
transform!(Q8, :DataValue => ByRow(x -> parse(Float64, replace(x, ',' => ""))),
           renamecols = false)
first(Q8, 6)
```

## Save the API values to as CSV text file

Name the file `Table2_1_Ann.csv`.

Use `SeriesCode`, `TimePeriod`, `DataValue` as headers.

Use your BEA UserId underscore current YearMonthDay as the name of the folder.

```@example Pipeline
isdir(joinpath(pkgdir(CommonTaskExercise), "data", replace("nijbs2_$(today())", '-' => '_'))) ||
    mkdir(joinpath(pkgdir(CommonTaskExercise), "data", replace("nijbs2_$(today())", '-' => '_')))
Q9 = select(Q8, [:SeriesCode, :TimePeriod, :DataValue])
CSV.write(joinpath(pkgdir(CommonTaskExercise),
                   "data", replace("nijbs2_$(today())", '-' => '_'), "Table2_1_Ann.csv"),
          Q9)
```

## Generate a PDF graph based on the API data (single or multiple series with legend)

```@example Pipeline
Q10tbl = Q8[vcat(4:5, 7:8),[:LineDescription, :DataValue]]
transform!(Q10tbl, :DataValue => ByRow(x -> x / 1_000_000),
           :LineDescription =>
               ByRow(x -> x ∈ ["Private industries", "Government"] ?
                         "Wages and salaries" :
                         "Supplements to wages and salaries") => "Account",
           renamecols = false)
replace!(Q10tbl[!,:LineDescription],
         "Employer contributions for employee pension and insurance funds" =>
            "Empl. Contr. Pension/Insurance",
         "Employer contributions for government social insurance" =>
            "Empl. Contr. Social Insurance")
first(Q10tbl, 6)
```

```@example Pipeline
plt = Q10tbl |>
    @vlplot(:bar,
            title = {text = "US National Income Accounts (2019)"},
            x = {"Account:n",
                 axis = {title = "Income Account",
                         labelAlign = "center",
                         labelAngle = 0,
                         dx = 200}},
            y = {"DataValue", axis = {title = "Billions in Current Dollars (\$)"}},
            color = {:LineDescription, legend = {title = "Line Item"}},
            height = 400,
            width = 400,
            )
```

[VegaLite](https://www.queryverse.org/VegaLite.jl/stable) is just one of the various plotting libraries available.

Other backends are available such as Makie (see some [examples](https://makie.juliaplots.org/stable)).

```@example Pipeline
isdir(joinpath(pkgdir(CommonTaskExercise), "figs")) ||
    mkdir(joinpath(pkgdir(CommonTaskExercise), "figs"))
save(joinpath(pkgdir(CommonTaskExercise), "figs", "NIPA.pdf"), plt)
```
